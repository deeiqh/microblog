openapi: "3.0.0"
info:
  title: Microblog
  version: "1.0.0"
servers:
  - url: "/api"
tags:
  - name: "general"
    description: "Monitoring routes for the server"
  - name: "auth"
  - name: "accounts"
  - name: "posts"
  - name: "comments"
paths:
  /status:
    get:
      tags:
        - "general"
      responses:
        "200":
          description: "Server's date"
          content:
            application/json:
              schema:
                properties:
                  time:
                    type: "string"

  /auth/signup:
    post:
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: "string"
                lastName:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signup"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/signin:
    post:
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signin"
        "401":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/signout:
    post:
      tags:
        - "auth"
      responses:
        "204":
          description: "Empty body"
      security:
        - api_key: []

  /accounts/confirm-account:
    post:
      tags:
        - "accounts"
      parameters:
        - name: "token"
          in: "query"
          schema:
            type: "string"
      responses:
        "204":
          description: "Empty body"
        "422":
          description: "Unprocessable Token"

  /accounts/me:
    get:
      summary: "Retrieve own account profile"
      tags:
        - "accounts"
      responses:
        "200":
          description: "Account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
      security:
        - api_key: []
    patch:
      summary: "Update own profile"
      tags:
        - "accounts"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                firstName:
                  type: "string"
                lastName:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"
                public:
                  type: "object"
                  properties:
                    email:
                      type: "boolean"
                    name:
                      type: "boolean"
      responses:
        "200":
          description: "Updated profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
      security:
        - api_key: []
  /accounts/me/posts:
    get:
      summary: "Retrieves all posts from own account"
      tags:
        - "posts"
      responses:
        "200":
          description: "All posts from account"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostWithoutAuthor"
      security:
        - api_key: []
  /accounts/me/comments:
    get:
      summary: "Retrieves all comments from own account"
      tags:
        - "comments"
      responses:
        "200":
          description: "All comments from account"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CommentWithoutAuthor"
      security:
        - api_key: []
  /accounts/{accountId}:
    get:
      summary: "Retrieve account profile"
      tags:
        - "accounts"
      parameters:
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: "Account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "404":
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /accounts/{accountId}/posts:
    get:
      summary: "Retrieves all posts from account"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: "All posts from account"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostWithoutAuthor"
        "404":
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /accounts/{accountId}/comments:
    get:
      summary: "Retrieves all comments from account"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: "All comments from account"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CommentWithoutAuthor"
        "404":
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /posts:
    get:
      summary: "Retrieves all posts"
      tags:
        - "posts"
      responses:
        "200":
          description: "All posts"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
    post:
      summary: "Creates a new post"
      tags:
        - "posts"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "title"
                - "content"
              properties:
                title:
                  type: "string"
                category:
                  type: "string"
                content:
                  type: "string"
                draft:
                  type: "boolean"
                like:
                  type: "boolean"
      responses:
        "201":
          description: "New post created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      security:
        - api_key: []
  /posts/{postId}:
    get:
      summary: "Retrieves a post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          description: "A post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: "Update post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                title:
                  type: "string"
                category:
                  type: "string"
                content:
                  type: "string"
                draft:
                  type: "boolean"
                like:
                  type: "boolean"
      responses:
        "200":
          description: "Updated post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      security:
        - api_key: []
    delete:
      summary: "Delete own post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          description: "Deleted post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      security:
        - api_key: []
  /posts/{postId}/likes:
    get:
      summary: "Accounts that gave like to post"
      tags:
        - "posts"
      responses:
        "200":
          description: "Accounts"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Account"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{postId}/comments:
    get:
      summary: "Retrieves post's comments"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          description: "Comments"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Comment"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Creates a new comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "content"
              properties:
                content:
                  type: "string"
                draft:
                  type: "boolean"
                like:
                  type: "boolean"
      responses:
        "201":
          description: "New comment created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
      security:
        - api_key: []

  /comments:
    get:
      summary: "Retrieves all comments"
      tags:
        - "comments"
      responses:
        "200":
          description: "All comments"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Comment"
  /comments/{commentId}:
    get:
      summary: "Retrieves a comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      responses:
        "200":
          description: "A comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: "Comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: "Update comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                content:
                  type: "string"
                draft:
                  type: "boolean"
                like:
                  type: "boolean"
      responses:
        "200":
          description: "Updated comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
      security:
        - api_key: []
    delete:
      summary: "Delete own comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      responses:
        "200":
          description: "Deleted comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
      security:
        - api_key: []
  /comments/{commentId}/likes:
    get:
      summary: "Accounts that gave like to comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      responses:
        "200":
          description: "Accounts"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Account"
        "404":
          description: "Comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Signup:
      type: "object"
      properties:
        accessToken:
          type: "string"
        exp:
          type: "integer"
    Signin:
      type: "object"
      properties:
        accessToken:
          type: "string"
        exp:
          type: "integer"
    Error:
      type: "object"
      properties:
        statusCode:
          type: "integer"
        message:
          type: "string"
        errors:
          type: "array"
          items:
            type: "object"
            properties:
              property:
                type: "string"
              constraint:
                type: "array"
                items:
                  type: "string"
    Account:
      type: "object"
      properties:
        uuid:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
    PostWithoutAuthor:
      type: "object"
      properties:
        uuid:
          type: "string"
        title:
          type: "string"
        category:
          type: "string"
        content:
          type: "string"
        likes:
          type: "integer"
        comments:
          type: "array"
          items:
            $ref: "#/components/schemas/Comment"
        createdAt:
          type: "string"
    Post:
      allOf:
        - $ref: "#/components/schemas/PostWithoutAuthor"
        - type: "object"
          properties:
            author:
              $ref: "#/components/schemas/Account"
    CommentWithoutAuthor:
      type: "object"
      properties:
        uuid:
          type: "string"
        content:
          type: "string"
        likes:
          type: "integer"
        createdAt:
          type: "string"
    Comment:
      allOf:
        - $ref: "#/components/schemas/CommentWithoutAuthor"
        - type: "object"
          properties:
            author:
              $ref: "#/components/schemas/Account"

  parameters:
    postId:
      name: "postId"
      in: "path"
      description: "The post's uuid"
      required: true
      schema:
        type: "string"
    commentId:
      name: "commentId"
      in: "path"
      description: "The comment's uuid"
      required: true
      schema:
        type: "string"
    accountId:
      name: "accountId"
      in: "path"
      description: "The account's uuid"
      required: true
      schema:
        type: "string"

  securitySchemes:
    api_key:
      type: "apiKey"
      name: "authorization"
      in: "header"
      description: "Bearer <YOUR_TOKEN>"
