openapi: "3.0.0"
info:
  title: Microblog
  version: "1.0.0"
servers:
  - url: "/api"
tags:
  - name: "health"
    description: "Monitoring routes for the server"
  - name: "auth"
  - name: "users"
  - name: "posts"
  - name: "comments"
paths:
  /health:
    get:
      tags:
        - "health"
      responses:
        "200":
          description: "Server's date"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    enum: ["ok"]
                    type: "string"
                  uptime:
                    type: "string"

  /auth/register:
    post:
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "first_name"
                - "last_name"
                - "email"
                - "password"
              properties:
                first_name:
                  type: "string"
                last_name:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Register"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/sign-in:
    post:
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "email"
                - "password"
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignIn"
        "404":
          description: "User not found "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/reset-password:
    post:
      summary: "Send an email to set a new password"
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "email"
              properties:
                email:
                  type: "string"
      responses:
        "204":
          description: "Empty body"
  /auth/set-password:
    patch:
      summary: "Update password"
      tags:
        - "auth"
      parameters:
        - name: "token"
          description: "token to protect user"
          in: "query"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "password"
              properties:
                password:
                  type: "string"
      responses:
        "204":
          description: "Empty body"
      security:
        - bearerAuth: []
  /auth/sign-out:
    post:
      tags:
        - "auth"
      responses:
        "204":
          description: "Empty body"
        "412":
          description: "No token received"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []

  /users/confirm:
    post:
      summary: "Confirm user"
      tags:
        - "users"
      parameters:
        - name: "token"
          in: "query"
          schema:
            type: "string"
      responses:
        "204":
          description: "Empty body"
        "412":
          description: "No token received"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/me:
    get:
      summary: "Retrieve own user profile"
      tags:
        - "users"
      responses:
        "200":
          description: "User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    patch:
      summary: "Update own profile"
      tags:
        - "users"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Updated profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: "Forbidden, email already taken"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /users/me/password: {}
  /users/me/posts:
    get:
      summary: "Retrieves all posts from own user"
      tags:
        - "posts"
      responses:
        "200":
          description: "All posts from user"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostWithoutAuthor"
      security:
        - bearerAuth: []
  /users/me/comments:
    get:
      summary: "Retrieves all comments from own user"
      tags:
        - "comments"
      responses:
        "200":
          description: "All comments from user"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CommentWithoutAuthor"
      security:
        - bearerAuth: []
  /users/{userId}:
    get:
      summary: "Retrieve user profile"
      tags:
        - "users"
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: "User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/posts:
    get:
      summary: "Retrieves all posts from user"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: "All posts from user"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostWithoutAuthor"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /posts:
    get:
      summary: "Retrieves all posts"
      tags:
        - "posts"
      responses:
        "200":
          description: "All posts"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
    post:
      summary: "Creates a new post"
      tags:
        - "posts"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "title"
                - "content"
              properties:
                title:
                  type: "string"
                category:
                  type: "string"
                content:
                  type: "string"
                draft:
                  type: "boolean"
      responses:
        "201":
          description: "New post created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      security:
        - bearerAuth: []
  /posts/{postId}:
    get:
      summary: "Retrieves a post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          description: "A post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: "Update own post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                title:
                  type: "string"
                category:
                  type: "string"
                content:
                  type: "string"
                draft:
                  type: "boolean"
      responses:
        "200":
          description: "Updated post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      security:
        - bearerAuth: []
    delete:
      summary: "Delete own post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          description: "Deleted post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      security:
        - bearerAuth: []
  /posts/{postId}/like:
    patch:
      summary: "Like/dislike a post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                like:
                  type: "boolean"
      responses:
        "204":
          description: "Empty content"
      security:
        - bearerAuth: []
  /posts/{postId}/report:
    post:
      summary: "Report a post to moderator"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "message"
              properties:
                message:
                  type: "string"
      responses:
        "204":
          description: "Empty body"
      security:
        - bearerAuth: []
  /posts/{postId}/likes:
    get:
      summary: "Users that gave like to post"
      tags:
        - "posts"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          description: "Users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{postId}/comments:
    get:
      summary: "Retrieves post's comments"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          description: "Comments"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Comment"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Creates a new comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "content"
              properties:
                content:
                  type: "string"
                draft:
                  type: "boolean"
      responses:
        "201":
          description: "New comment created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
      security:
        - bearerAuth: []

  /comments/{commentId}:
    get:
      summary: "Retrieves a comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      responses:
        "200":
          description: "A comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: "Comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: "Update own comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                content:
                  type: "string"
                draft:
                  type: "boolean"
      responses:
        "200":
          description: "Updated comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
      security:
        - bearerAuth: []
    delete:
      summary: "Delete own comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      responses:
        "200":
          description: "Deleted comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
      security:
        - bearerAuth: []
  /comments/{commentId}/like:
    patch:
      summary: "Like/dislike a comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                like:
                  type: "boolean"
      responses:
        "204":
          description: "Empty content"
      security:
        - bearerAuth: []
  /comments/{commentId}/report:
    post:
      summary: "Report a comment to moderator"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "message"
              properties:
                message:
                  type: "string"
      responses:
        "204":
          description: "Empty body"
      security:
        - bearerAuth: []
  /comments/{commentId}/likes:
    get:
      summary: "Users that gave like to comment"
      tags:
        - "comments"
      parameters:
        - $ref: "#/components/parameters/commentId"
      responses:
        "200":
          description: "Users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "Comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Register:
      type: "object"
      properties:
        token:
          type: "string"
        expiration:
          type: "integer"
    SignIn:
      type: "object"
      properties:
        token:
          type: "string"
        expiration:
          type: "integer"
    Error:
      type: "object"
      properties:
        statusCode:
          type: "integer"
        message:
          type: "string"
        errors:
          type: "array"
          items:
            type: "object"
            properties:
              property:
                type: "string"
              constraint:
                type: "array"
                items:
                  type: "string"
    User:
      type: "object"
      properties:
        uuid:
          type: "string"
        first_name:
          type: "string"
        last_name:
          type: "string"
        email:
          type: "string"
        configurations:
          type: "object"
          properties:
            name_public:
              type: "boolean"
            email_public:
              type: "boolean"
    PostWithoutAuthor:
      type: "object"
      properties:
        uuid:
          type: "string"
        title:
          type: "string"
        category:
          type: "string"
        content:
          type: "string"
        likes_number:
          type: "integer"
        comments:
          type: "array"
          items:
            $ref: "#/components/schemas/Comment"
        created_at:
          type: "string"
    Post:
      allOf:
        - $ref: "#/components/schemas/PostWithoutAuthor"
        - type: "object"
          properties:
            author:
              $ref: "#/components/schemas/User"
    CommentWithoutAuthor:
      type: "object"
      properties:
        uuid:
          type: "string"
        content:
          type: "string"
        likes_number:
          type: "integer"
        created_at:
          type: "string"
    Comment:
      allOf:
        - $ref: "#/components/schemas/CommentWithoutAuthor"
        - type: "object"
          properties:
            author:
              $ref: "#/components/schemas/User"

  parameters:
    postId:
      name: "postId"
      in: "path"
      description: "The post's uuid"
      required: true
      schema:
        type: "string"
    commentId:
      name: "commentId"
      in: "path"
      description: "The comment's uuid"
      required: true
      schema:
        type: "string"
    userId:
      name: "userId"
      in: "path"
      description: "The user's uuid"
      required: true
      schema:
        type: "string"

  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: bearer
      description: "Bearer <YOUR_TOKEN>"
